// Code generated by protoc-gen-go. DO NOT EDIT.
// source: resp_msg.proto

package msg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RespMsg_Code int32

const (
	RespMsg_Done   RespMsg_Code = 0
	RespMsg_Failed RespMsg_Code = 1
)

var RespMsg_Code_name = map[int32]string{
	0: "Done",
	1: "Failed",
}
var RespMsg_Code_value = map[string]int32{
	"Done":   0,
	"Failed": 1,
}

func (x RespMsg_Code) String() string {
	return proto.EnumName(RespMsg_Code_name, int32(x))
}
func (RespMsg_Code) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{0, 0} }

type RespMsg struct {
	Uid  string       `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
	Code RespMsg_Code `protobuf:"varint,2,opt,name=code,enum=msg.RespMsg_Code" json:"code,omitempty"`
	Data []byte       `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *RespMsg) Reset()                    { *m = RespMsg{} }
func (m *RespMsg) String() string            { return proto.CompactTextString(m) }
func (*RespMsg) ProtoMessage()               {}
func (*RespMsg) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *RespMsg) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *RespMsg) GetCode() RespMsg_Code {
	if m != nil {
		return m.Code
	}
	return RespMsg_Done
}

func (m *RespMsg) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*RespMsg)(nil), "msg.RespMsg")
	proto.RegisterEnum("msg.RespMsg_Code", RespMsg_Code_name, RespMsg_Code_value)
}

func init() { proto.RegisterFile("resp_msg.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 151 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0x4a, 0x2d, 0x2e,
	0x88, 0xcf, 0x2d, 0x4e, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xce, 0x2d, 0x4e, 0x57,
	0x2a, 0xe1, 0x62, 0x0f, 0x4a, 0x2d, 0x2e, 0xf0, 0x2d, 0x4e, 0x17, 0x12, 0xe0, 0x62, 0x2e, 0xcd,
	0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0x31, 0x85, 0x54, 0xb9, 0x58, 0x92, 0xf3,
	0x53, 0x52, 0x25, 0x98, 0x14, 0x18, 0x35, 0xf8, 0x8c, 0x04, 0xf5, 0x40, 0x7a, 0xa1, 0xaa, 0xf5,
	0x9c, 0xf3, 0x53, 0x52, 0x83, 0xc0, 0xd2, 0x42, 0x42, 0x5c, 0x2c, 0x29, 0x89, 0x25, 0x89, 0x12,
	0xcc, 0x0a, 0x8c, 0x1a, 0x3c, 0x41, 0x60, 0xb6, 0x92, 0x0c, 0x17, 0x0b, 0x48, 0x85, 0x10, 0x07,
	0x17, 0x8b, 0x4b, 0x7e, 0x5e, 0xaa, 0x00, 0x83, 0x10, 0x17, 0x17, 0x9b, 0x5b, 0x62, 0x66, 0x4e,
	0x6a, 0x8a, 0x00, 0x63, 0x12, 0x1b, 0xd8, 0x05, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x71,
	0xb9, 0x7c, 0xb6, 0x93, 0x00, 0x00, 0x00,
}
